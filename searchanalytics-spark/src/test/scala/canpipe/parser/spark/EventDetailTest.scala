package canpipe.parser.spark

import org.scalatest.{ BeforeAndAfter, FlatSpec }

class EventDetailTest extends FlatSpec with BeforeAndAfter {

  before {

  }

  after {

  }

  val globalDetail = new EventDetailPrivate(eventId = "", eventTimestamp = "t", timestampId = 0L, eventSite = "s",
    eventSiteLanguage = "l", userId = "u", apiKey = "p", userSessionId = "", transactionDuration = 2L,
    isResultCached = false, eventReferrer = "r", pageName = "p", requestUri = "u", userIP = "3",
    userAgent = "u",
    userIsRobot = true,
    userLocation = "l",
    userBrowser = "b",
    searchId = "sId",
    searchWhat = "what", searchWhere = "where",
    searchResultCount = "rc",
    searchWhatResolved = "wr",
    searchIsDisambiguation = true,
    searchIsSuggestion = false,
    searchFailedOrSuccess = "success",
    searchHasRHSListings = false,
    searchHasNonAdRollupListings = true,
    searchIsCalledBing = false, searchGeoOrDir = "string",
    categoryId = "string",
    tierId = "string",
    tierCount = 123L,
    searchGeoName = "string",
    searchGeoType = "string",
    searchGeoPolygonIds = "string",
    tierUdacCountList = "string",
    directoryId = 123L,
    headingId = 123L,
    headingRelevance = "string",
    searchType = "string",
    searchResultPage = 456,
    searchResultPerPage = 456,
    searchLatitude = -1.23,
    searchLongitude = -1.23,
    /* ******************************************** */
    /* Merchants attributes and fields */
    merchantId = "string",
    merchantZone = "string",
    merchantLatitude = "string",
    merchantLongitude = "string",
    merchantDistance = "string",
    merchantDisplayPosition = "string",
    merchantIsNonAdRollup = "string",
    merchantRank = "string",
    merchantIsRelevantListing = "string",
    merchantIsRelevantHeading = "string",
    merchantHeadingIdList = "string",
    merchantChannel1List = "string",
    merchantChannel2List = "string",
    productType = "string",
    productLanguage = "string",
    productUdac = "string",
    merchantListingType = "string",
    /* ******************************************** */
    /* Search Analytics/Analysis attributes and fields */
    searchAnalysisIsfuzzy = false,
    searchAnalysisIsGeoExpanded = false,
    searchAnalysisIsBusinessName = false,
    key = "string",
    value = "string")

  "A private Event Detail" should "be equal to itself" in {
    assert(globalDetail == globalDetail)
  }

  it should "be equal to an exact copy of itself" in {

    val copyOf = new EventDetailPrivate(
      eventId = globalDetail.eventId,
      eventTimestamp = globalDetail.eventTimestamp,
      timestampId = globalDetail.timestampId,
      eventSite = globalDetail.eventSite,
      eventSiteLanguage = globalDetail.eventSiteLanguage,
      userId = globalDetail.userId,
      apiKey = globalDetail.apiKey,
      userSessionId = globalDetail.userSessionId,
      transactionDuration = globalDetail.transactionDuration,
      isResultCached = globalDetail.isResultCached,
      eventReferrer = globalDetail.eventReferrer,
      pageName = globalDetail.pageName,
      requestUri = globalDetail.requestUri,
      userIP = globalDetail.userIP,
      userAgent = globalDetail.userAgent,
      userIsRobot = globalDetail.userIsRobot,
      userLocation = globalDetail.userLocation,
      userBrowser = globalDetail.userBrowser,
      searchId = globalDetail.searchId,
      searchWhat = globalDetail.searchWhat,
      searchWhere = globalDetail.searchWhere,
      searchResultCount = globalDetail.searchResultCount,
      searchWhatResolved = globalDetail.searchWhatResolved,
      searchIsDisambiguation = globalDetail.searchIsDisambiguation,
      searchIsSuggestion = globalDetail.searchIsSuggestion,
      searchFailedOrSuccess = globalDetail.searchFailedOrSuccess,
      searchHasRHSListings = globalDetail.searchHasRHSListings,
      searchHasNonAdRollupListings = globalDetail.searchHasNonAdRollupListings,
      searchIsCalledBing = globalDetail.searchIsCalledBing,
      searchGeoOrDir = globalDetail.searchGeoOrDir,
      categoryId = globalDetail.categoryId,
      tierId = globalDetail.tierId,
      tierCount = globalDetail.tierCount,
      searchGeoName = globalDetail.searchGeoName,
      searchGeoType = globalDetail.searchGeoType,
      searchGeoPolygonIds = globalDetail.searchGeoPolygonIds,
      tierUdacCountList = globalDetail.productElement(36).asInstanceOf[String],
      directoryId = globalDetail.directoryId,
      headingId = globalDetail.headingId,
      headingRelevance = globalDetail.headingRelevance,
      searchType = globalDetail.searchType,
      searchResultPage = globalDetail.searchResultPage,
      searchResultPerPage = globalDetail.searchResultPerPage,
      searchLatitude = globalDetail.searchLatitude,
      searchLongitude = globalDetail.searchLongitude,
      /* ******************************************** */
      /* Merchants attributes and fields */
      merchantId = globalDetail.merchantId,
      merchantZone = globalDetail.merchantZone,
      merchantLatitude = globalDetail.merchantLatitude,
      merchantLongitude = globalDetail.merchantLongitude,
      merchantDistance = globalDetail.merchantDistance,
      merchantDisplayPosition = globalDetail.merchantDisplayPosition,
      merchantIsNonAdRollup = globalDetail.merchantIsNonAdRollup,
      merchantRank = globalDetail.merchantRank,
      merchantIsRelevantListing = globalDetail.merchantIsRelevantListing,
      merchantIsRelevantHeading = globalDetail.merchantIsRelevantHeading,
      merchantHeadingIdList = globalDetail.merchantHeadingIdList,
      merchantChannel1List = globalDetail.merchantChannel1List,
      merchantChannel2List = globalDetail.merchantChannel2List,
      productType = globalDetail.productType,
      productLanguage = globalDetail.productLanguage,
      productUdac = globalDetail.productUdac,
      merchantListingType = globalDetail.merchantListingType,
      /* ******************************************** */
      /* Search Analytics/Analysis attributes and fields */
      searchAnalysisIsfuzzy = globalDetail.searchAnalysisIsfuzzy,
      searchAnalysisIsGeoExpanded = globalDetail.searchAnalysisIsGeoExpanded,
      searchAnalysisIsBusinessName = globalDetail.searchAnalysisIsBusinessName,
      key = globalDetail.key,
      value = globalDetail.value)

    assert(globalDetail == copyOf)
  }

  it should "conserve structure with 'productElement' calls" in {
    val copyOf = new EventDetailPrivate(
      globalDetail.productElement(0).asInstanceOf[String],
      globalDetail.productElement(1).asInstanceOf[String],
      globalDetail.productElement(2).asInstanceOf[Long],
      globalDetail.productElement(3).asInstanceOf[String],
      globalDetail.productElement(4).asInstanceOf[String],
      globalDetail.productElement(5).asInstanceOf[String],
      globalDetail.productElement(6).asInstanceOf[String],
      globalDetail.productElement(7).asInstanceOf[String],
      globalDetail.productElement(8).asInstanceOf[Long],
      globalDetail.productElement(9).asInstanceOf[Boolean],
      globalDetail.productElement(10).asInstanceOf[String],
      globalDetail.productElement(11).asInstanceOf[String],
      globalDetail.productElement(12).asInstanceOf[String],
      globalDetail.productElement(13).asInstanceOf[String],
      globalDetail.productElement(14).asInstanceOf[String],
      globalDetail.productElement(15).asInstanceOf[Boolean],
      globalDetail.productElement(16).asInstanceOf[String],
      globalDetail.productElement(17).asInstanceOf[String],
      globalDetail.productElement(18).asInstanceOf[String],
      globalDetail.productElement(19).asInstanceOf[String],
      globalDetail.productElement(20).asInstanceOf[String],
      globalDetail.productElement(21).asInstanceOf[String],
      globalDetail.productElement(22).asInstanceOf[String],
      globalDetail.productElement(23).asInstanceOf[Boolean],
      globalDetail.productElement(24).asInstanceOf[Boolean],
      globalDetail.productElement(25).asInstanceOf[String],
      globalDetail.productElement(26).asInstanceOf[Boolean],
      globalDetail.productElement(27).asInstanceOf[Boolean],
      globalDetail.productElement(28).asInstanceOf[Boolean],
      globalDetail.productElement(29).asInstanceOf[String],
      globalDetail.productElement(30).asInstanceOf[String],
      globalDetail.productElement(31).asInstanceOf[String],
      globalDetail.productElement(32).asInstanceOf[Long],
      globalDetail.productElement(33).asInstanceOf[String],
      globalDetail.productElement(34).asInstanceOf[String],
      globalDetail.productElement(35).asInstanceOf[String],
      globalDetail.productElement(36).asInstanceOf[String],
      globalDetail.productElement(37).asInstanceOf[Long],
      globalDetail.productElement(38).asInstanceOf[Long],
      globalDetail.productElement(39).asInstanceOf[String],
      globalDetail.productElement(40).asInstanceOf[String],
      globalDetail.productElement(41).asInstanceOf[Int],
      globalDetail.productElement(42).asInstanceOf[Int],
      globalDetail.productElement(43).asInstanceOf[Double],
      globalDetail.productElement(44).asInstanceOf[Double],
      globalDetail.productElement(45).asInstanceOf[String],
      globalDetail.productElement(46).asInstanceOf[String],
      globalDetail.productElement(47).asInstanceOf[String],
      globalDetail.productElement(48).asInstanceOf[String],
      globalDetail.productElement(49).asInstanceOf[String],
      globalDetail.productElement(50).asInstanceOf[String],
      globalDetail.productElement(51).asInstanceOf[String],
      globalDetail.productElement(52).asInstanceOf[String],
      globalDetail.productElement(53).asInstanceOf[String],
      globalDetail.productElement(54).asInstanceOf[String],
      globalDetail.productElement(55).asInstanceOf[String],
      globalDetail.productElement(56).asInstanceOf[String],
      globalDetail.productElement(57).asInstanceOf[String],
      globalDetail.productElement(58).asInstanceOf[String],
      globalDetail.productElement(59).asInstanceOf[String],
      globalDetail.productElement(60).asInstanceOf[String],
      globalDetail.productElement(61).asInstanceOf[String],
      globalDetail.productElement(62).asInstanceOf[Boolean],
      globalDetail.productElement(63).asInstanceOf[Boolean],
      globalDetail.productElement(64).asInstanceOf[Boolean],
      globalDetail.productElement(65).asInstanceOf[String],
      globalDetail.productElement(66).asInstanceOf[String])
    assert(globalDetail == copyOf)
  }

}
